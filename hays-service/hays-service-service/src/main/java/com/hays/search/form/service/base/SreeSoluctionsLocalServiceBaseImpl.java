/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.hays.search.form.service.base;

import aQute.bnd.annotation.ProviderType;

import com.hays.search.form.model.SreeSoluctions;
import com.hays.search.form.service.SreeSoluctionsLocalService;
import com.hays.search.form.service.persistence.EmployeeFinder;
import com.hays.search.form.service.persistence.EmployeePersistence;
import com.hays.search.form.service.persistence.SreeSoluctionsFinder;
import com.hays.search.form.service.persistence.SreeSoluctionsPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the sree soluctions local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.hays.search.form.service.impl.SreeSoluctionsLocalServiceImpl}.
 * </p>
 *
 * @author Sreenivasulu
 * @see com.hays.search.form.service.impl.SreeSoluctionsLocalServiceImpl
 * @see com.hays.search.form.service.SreeSoluctionsLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class SreeSoluctionsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SreeSoluctionsLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.hays.search.form.service.SreeSoluctionsLocalServiceUtil} to access the sree soluctions local service.
	 */

	/**
	 * Adds the sree soluctions to the database. Also notifies the appropriate model listeners.
	 *
	 * @param sreeSoluctions the sree soluctions
	 * @return the sree soluctions that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SreeSoluctions addSreeSoluctions(SreeSoluctions sreeSoluctions) {
		sreeSoluctions.setNew(true);

		return sreeSoluctionsPersistence.update(sreeSoluctions);
	}

	/**
	 * Creates a new sree soluctions with the primary key. Does not add the sree soluctions to the database.
	 *
	 * @param soluctionId the primary key for the new sree soluctions
	 * @return the new sree soluctions
	 */
	@Override
	public SreeSoluctions createSreeSoluctions(long soluctionId) {
		return sreeSoluctionsPersistence.create(soluctionId);
	}

	/**
	 * Deletes the sree soluctions with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param soluctionId the primary key of the sree soluctions
	 * @return the sree soluctions that was removed
	 * @throws PortalException if a sree soluctions with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SreeSoluctions deleteSreeSoluctions(long soluctionId)
		throws PortalException {
		return sreeSoluctionsPersistence.remove(soluctionId);
	}

	/**
	 * Deletes the sree soluctions from the database. Also notifies the appropriate model listeners.
	 *
	 * @param sreeSoluctions the sree soluctions
	 * @return the sree soluctions that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SreeSoluctions deleteSreeSoluctions(SreeSoluctions sreeSoluctions) {
		return sreeSoluctionsPersistence.remove(sreeSoluctions);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SreeSoluctions.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return sreeSoluctionsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hays.search.form.model.impl.SreeSoluctionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return sreeSoluctionsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hays.search.form.model.impl.SreeSoluctionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return sreeSoluctionsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return sreeSoluctionsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return sreeSoluctionsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SreeSoluctions fetchSreeSoluctions(long soluctionId) {
		return sreeSoluctionsPersistence.fetchByPrimaryKey(soluctionId);
	}

	/**
	 * Returns the sree soluctions with the primary key.
	 *
	 * @param soluctionId the primary key of the sree soluctions
	 * @return the sree soluctions
	 * @throws PortalException if a sree soluctions with the primary key could not be found
	 */
	@Override
	public SreeSoluctions getSreeSoluctions(long soluctionId)
		throws PortalException {
		return sreeSoluctionsPersistence.findByPrimaryKey(soluctionId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(sreeSoluctionsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(SreeSoluctions.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("soluctionId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(sreeSoluctionsLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(SreeSoluctions.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName("soluctionId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(sreeSoluctionsLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(SreeSoluctions.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("soluctionId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return sreeSoluctionsLocalService.deleteSreeSoluctions((SreeSoluctions)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return sreeSoluctionsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the sree soluctionses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.hays.search.form.model.impl.SreeSoluctionsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of sree soluctionses
	 * @param end the upper bound of the range of sree soluctionses (not inclusive)
	 * @return the range of sree soluctionses
	 */
	@Override
	public List<SreeSoluctions> getSreeSoluctionses(int start, int end) {
		return sreeSoluctionsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of sree soluctionses.
	 *
	 * @return the number of sree soluctionses
	 */
	@Override
	public int getSreeSoluctionsesCount() {
		return sreeSoluctionsPersistence.countAll();
	}

	/**
	 * Updates the sree soluctions in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param sreeSoluctions the sree soluctions
	 * @return the sree soluctions that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SreeSoluctions updateSreeSoluctions(SreeSoluctions sreeSoluctions) {
		return sreeSoluctionsPersistence.update(sreeSoluctions);
	}

	/**
	 * Returns the employee local service.
	 *
	 * @return the employee local service
	 */
	public com.hays.search.form.service.EmployeeLocalService getEmployeeLocalService() {
		return employeeLocalService;
	}

	/**
	 * Sets the employee local service.
	 *
	 * @param employeeLocalService the employee local service
	 */
	public void setEmployeeLocalService(
		com.hays.search.form.service.EmployeeLocalService employeeLocalService) {
		this.employeeLocalService = employeeLocalService;
	}

	/**
	 * Returns the employee persistence.
	 *
	 * @return the employee persistence
	 */
	public EmployeePersistence getEmployeePersistence() {
		return employeePersistence;
	}

	/**
	 * Sets the employee persistence.
	 *
	 * @param employeePersistence the employee persistence
	 */
	public void setEmployeePersistence(EmployeePersistence employeePersistence) {
		this.employeePersistence = employeePersistence;
	}

	/**
	 * Returns the employee finder.
	 *
	 * @return the employee finder
	 */
	public EmployeeFinder getEmployeeFinder() {
		return employeeFinder;
	}

	/**
	 * Sets the employee finder.
	 *
	 * @param employeeFinder the employee finder
	 */
	public void setEmployeeFinder(EmployeeFinder employeeFinder) {
		this.employeeFinder = employeeFinder;
	}

	/**
	 * Returns the sree soluctions local service.
	 *
	 * @return the sree soluctions local service
	 */
	public SreeSoluctionsLocalService getSreeSoluctionsLocalService() {
		return sreeSoluctionsLocalService;
	}

	/**
	 * Sets the sree soluctions local service.
	 *
	 * @param sreeSoluctionsLocalService the sree soluctions local service
	 */
	public void setSreeSoluctionsLocalService(
		SreeSoluctionsLocalService sreeSoluctionsLocalService) {
		this.sreeSoluctionsLocalService = sreeSoluctionsLocalService;
	}

	/**
	 * Returns the sree soluctions persistence.
	 *
	 * @return the sree soluctions persistence
	 */
	public SreeSoluctionsPersistence getSreeSoluctionsPersistence() {
		return sreeSoluctionsPersistence;
	}

	/**
	 * Sets the sree soluctions persistence.
	 *
	 * @param sreeSoluctionsPersistence the sree soluctions persistence
	 */
	public void setSreeSoluctionsPersistence(
		SreeSoluctionsPersistence sreeSoluctionsPersistence) {
		this.sreeSoluctionsPersistence = sreeSoluctionsPersistence;
	}

	/**
	 * Returns the sree soluctions finder.
	 *
	 * @return the sree soluctions finder
	 */
	public SreeSoluctionsFinder getSreeSoluctionsFinder() {
		return sreeSoluctionsFinder;
	}

	/**
	 * Sets the sree soluctions finder.
	 *
	 * @param sreeSoluctionsFinder the sree soluctions finder
	 */
	public void setSreeSoluctionsFinder(
		SreeSoluctionsFinder sreeSoluctionsFinder) {
		this.sreeSoluctionsFinder = sreeSoluctionsFinder;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.hays.search.form.model.SreeSoluctions",
			sreeSoluctionsLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.hays.search.form.model.SreeSoluctions");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return SreeSoluctionsLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return SreeSoluctions.class;
	}

	protected String getModelClassName() {
		return SreeSoluctions.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = sreeSoluctionsPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.hays.search.form.service.EmployeeLocalService.class)
	protected com.hays.search.form.service.EmployeeLocalService employeeLocalService;
	@BeanReference(type = EmployeePersistence.class)
	protected EmployeePersistence employeePersistence;
	@BeanReference(type = EmployeeFinder.class)
	protected EmployeeFinder employeeFinder;
	@BeanReference(type = SreeSoluctionsLocalService.class)
	protected SreeSoluctionsLocalService sreeSoluctionsLocalService;
	@BeanReference(type = SreeSoluctionsPersistence.class)
	protected SreeSoluctionsPersistence sreeSoluctionsPersistence;
	@BeanReference(type = SreeSoluctionsFinder.class)
	protected SreeSoluctionsFinder sreeSoluctionsFinder;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}